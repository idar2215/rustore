import telebot
from telebot import types

# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '123456789:AaBbHopkwjp3293ikd'

bot = telebot.TeleBot(TOKEN)

# –û—Ç–∫–ª—é—á–∞–µ–º –≤–µ–±—Ö—É–∫ (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ)
try:
    bot.delete_webhook()
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–°–æ–µ–¥–∏–Ω–∏—Ç—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"
start_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
start_keyboard.add(types.KeyboardButton("–°–æ–µ–¥–∏–Ω–∏—Ç—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
end_dialog_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
end_dialog_keyboard.add(types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–∏–Ω—è—Ç—å" –∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
operator_keyboard = types.InlineKeyboardMarkup()
operator_keyboard.add(types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data='accept'),
                      types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data='reject'))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–∞
operators = {}  # {operator_id: {'status': 'free', 'stats': {'accepted': 0, 'rejected': 0}}}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
active_dialogs = {}  # {user_id: operator_id}

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admins = [1234567, 2314685]  # –ó–∞–º–µ–Ω–∏—Ç–µ ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! üëã", reply_markup=start_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–µ–¥–∏–Ω–∏—Ç—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"
@bot.message_handler(func=lambda message: message.text == "–°–æ–µ–¥–∏–Ω–∏—Ç—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
def connect_operator(message):
    user_id = message.from_user.id
    free_operator = None
    for operator_id, data in operators.items():
        if data['status'] == 'free':
            free_operator = operator_id
            break

    if free_operator:
        bot.send_message(free_operator, "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å!", reply_markup=operator_keyboard)
        active_dialogs[user_id] = free_operator
        operators[free_operator]['status'] = 'busy'
        bot.send_message(user_id, "–û–∂–∏–¥–∞–π—Ç–µ, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è!")
    else:
        bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data in ['accept', 'reject'])
def handle_operator_choice(call):
    operator_id = call.from_user.id
    user_id = None
    for uid, oid in active_dialogs.items():
        if oid == operator_id:
            user_id = uid
            break
    
    if call.data == 'accept' and user_id:
        bot.send_message(user_id, "–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!", reply_markup=end_dialog_keyboard)
        bot.send_message(operator_id, "–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –¥–∏–∞–ª–æ–≥.")
        operators[operator_id]['stats']['accepted'] += 1
    elif call.data == 'reject' and user_id:
        bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        bot.send_message(operator_id, "–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
        operators[operator_id]['stats']['rejected'] += 1
        operators[operator_id]['status'] = 'free'
        del active_dialogs[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
@bot.message_handler(func=lambda message: message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
def end_dialog(message):
    user_id = message.from_user.id
    operator_id = active_dialogs.get(user_id)
    if operator_id:
        bot.send_message(operator_id, "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        operators[operator_id]['status'] = 'free'
        del active_dialogs[user_id]
        bot.send_message(user_id, "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ!")
    else:
        bot.send_message(user_id, "–í—ã –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_operator
@bot.message_handler(commands=['add_operator'])
def add_operator(message):
    user_id = message.from_user.id
    if user_id in admins:
        text = message.text.split()
        if len(text) > 1:
            operator_id = int(text[1])
            operators[operator_id] = {'status': 'free', 'stats': {'accepted': 0, 'rejected': 0}}
            bot.send_message(user_id, f"–û–ø–µ—Ä–∞—Ç–æ—Ä {operator_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_admin
@bot.message_handler(commands=['add_admin'])
def add_admin(message):
    user_id = message.from_user.id
    if user_id in admins:
        text = message.text.split()
        if len(text) > 1:
            admin_id = int(text[1])
            admins.append(admin_id)
            bot.send_message(user_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /operator_stats
@bot.message_handler(commands=['operator_stats'])
def show_operator_stats(message):
    user_id = message.from_user.id
    if user_id in admins:
        text = message.text.split()
        if len(text) > 1:
            operator_id = int(text[1])
            if operator_id in operators:
                stats = operators[operator_id]['stats']
                bot.send_message(user_id, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {operator_id}:\n–ü—Ä–∏–Ω—è—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['accepted']}\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['rejected']}")
            else:
                bot.send_message(user_id, "–¢–∞–∫–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mystats –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
@bot.message_handler(commands=['mystats'])
def show_my_stats(message):
    user_id = message.from_user.id
    if user_id in operators:
        stats = operators[user_id]['stats']
        bot.send_message(user_id, f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü—Ä–∏–Ω—è—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['accepted']}\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['rejected']}")
    else:
        bot.send_message(user_id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∏ –æ–±—Ä–∞—Ç–Ω–æ
@bot.message_handler(func=lambda message: message.from_user.id in active_dialogs or message.from_user.id in operators)
def relay_messages(message):
    user_id = message.from_user.id
    if user_id in active_dialogs:
        operator_id = active_dialogs[user_id]
        bot.send_message(operator_id, message.text)
    elif user_id in operators:
        for uid, oid in active_dialogs.items():
            if oid == user_id:
                bot.send_message(uid, message.text)
                break

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Long polling
bot.polling(none_stop=True)
